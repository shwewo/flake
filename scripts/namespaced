#!/usr/bin/env bash
PROGNAME="$(basename "$0")"

usage() {
  cat << EOF
Usage: sudo $PROGNAME [options]

This script creates network namespace that always utilizes your ISP
It's useful, for example, to connect to a VPN through your ISP, not through VPN you are connected

To execute programs inside of network namespace, use: 
- sudo ip netns exec sudo -u <user> <program>
- firejail --netns=nsd --noprofile <program>

Options:
  -h --help                    Show help
  -n --name <name>             Veth pair and network namespace name (default: direct, but keep in mind its concated with '_nsd')
  -c --country <CODE>          Country code to compare if somehow you are still connected through VPN (e.g. VPN tethering)
  -d --dns <ip>                DNS servers in the namespace, use ',' separator (default 1.1.1.1, 1.0.0.1)
  -h --hosts-file <file>       /etc/hosts in the namespace
  -p --program                 Program to launch in the namespace (graphical apps may require sudo -E)
  -u --user                    User to launch --program, default is root, you may specify it as \$USER

  --veth0-ip <ip>              Veth0 ip address (default: 10.42.0.1)
  --veth1-ip <ip>              Veth0 ip address (default: 10.42.0.2)
  --fwmark <fwmark>            Fwmark of the routed packets (default: 0x6e736430)
  --table <table>              Routing table of the namespace (default: 28103, use numbers from 28103 to 28113)
  --nokill                     Don't kill programs inside of namespace
EOF
}

define_variables() {
  RUNNING=true
  RUNNING_PID=$$
  CONN_CHECK_PID=
  COUNTRY_CHECK_PID=
  RTMON_PID=

  NAME="direct"
  COUNTRY_CHECK=
  VETH0_NAME=
  VETH1_NAME=
  VETH0_IP="10.42.0.1"
  VETH1_IP="10.42.0.2"
  DNS="1.1.1.1, 1.0.0.1"
  HOSTS_FILE=
  PROGRAM=
  PROGRAM_USER="root"
  FWMARK=0x6e736430
  TABLE=28103
  NOKILL=false
  
  NAMESPACE_GW=
  DEFAULT_IFACE=
  NAMESERVERS="nameserver 1.1.1.1\nnameserver 1.0.0.1"
  OLD_IPV4_FORWARD=$(sysctl -n net.ipv4.ip_forward)
}

parse_options() {
  while [[ -n "$1" ]]; do
    case "$1" in
      -h|--help) usage; exit 0 ;;
      -n|--name) shift; NAME=$1; shift ;;
      -c|--country) shift; COUNTRY_CHECK=$1; shift ;;
      -d|--dns) shift; NAMESERVERS=$(echo $1 | sed 's/, /\n/g' | sed 's/^/nameserver /'); shift ;;
      -h|--hosts-file) shift; HOSTS_FILE=$1; shift ;;
      -p|--program) shift; PROGRAM=$1; shift ;;
      -u|--user) shift; PROGRAM_USER=$1; shift ;;
      --veth0-ip) shift; VETH0_IP=$1; shift ;;
      --veth1-ip) shift; VETH1_IP=$1; shift ;;
      --fwmark) shift; FWMARK=$1; shift ;;
      --table) shift; TABLE=$1; shift ;;
      --nokill) shift; NOKILL=true ;;
      *) echo "Invalid parameter: $1" 1>&2; exit 1 ;;
    esac
  done

  if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root."
    exit 1
  fi

  if ! (( $TABLE >= 28103 && $TABLE <= 28113 )); then
    echo "Table should be in range from 28103 to 28113"
    exit 1
  fi

  NAME=$NAME"_nsd"
  VETH0_NAME=$NAME"0"
  VETH1_NAME=$NAME"1"

  if ip netns list | grep -q "$NAME"; then
    echo "This script is already running!"
    exit 1
  fi
}

########################################################################################################################

get_gateway() {
  echo "Waiting for the default interface..."
  while true; do
    DEFAULT_IFACE=$(ip route show default | awk '{print $5; exit}')
    NAMESPACE_GW=$(ip route show default | awk '{print $3; exit}')
    if [[ -n "$DEFAULT_IFACE" && -n "$NAMESPACE_GW" ]]; then
      break
    else
      sleep 3
    fi
  done

  echo -e "\nNamespace gateway: $NAMESPACE_GW"
  echo -e "Default interface: $DEFAULT_IFACE\n"
}

do_rules() {
  ip rule $1 from $VETH1_IP table $TABLE
  ip rule $1 to $VETH1_IP table $TABLE
  ip rule $1 fwmark $FWMARK table $TABLE
  ip route $1 $VETH1_IP via $VETH0_IP dev $VETH0_NAME table $TABLE
  ip route $1 default via $NAMESPACE_GW dev $DEFAULT_IFACE table $TABLE
}

do_iptables() {
  iptables $1 FORWARD -i $DEFAULT_IFACE -o $VETH0_NAME -j ACCEPT
  iptables $1 FORWARD -o $DEFAULT_IFACE -i $VETH0_NAME -j ACCEPT
  iptables $1 POSTROUTING -t nat -s $VETH1_IP/24 -o "$DEFAULT_IFACE" -j MASQUERADE
}

do_blackhole() {
  iptables -t raw $1 PREROUTING -i $VETH0_NAME -p tcp -d 104.16.133.229 --dport 80 -j ACCEPT
  iptables -t raw $1 PREROUTING -i $VETH0_NAME -p icmp -d 1.1.1.1 -j ACCEPT
  iptables -t raw $1 PREROUTING -i $VETH0_NAME -d $VETH0_IP -j ACCEPT
  iptables -t raw $1 PREROUTING -i $VETH0_NAME -d $VETH1_IP -j ACCEPT
  iptables -t raw $1 PREROUTING -i $VETH0_NAME -j DROP
}

########################################################################################################################

conn_check() {
  (
    sleep 5
    local restart_count=0
    local connected=true
    
    while true; do
      if ip netns exec $NAME ping -c 1 -W 3 1.1.1.1 &> /dev/null; then
        [ "$connected" = false ] && echo "Connection restored"
        connected=true
        restart_count=0
      else
        connected=false
        ((restart_count++))
        if [ "$restart_count" = 5 ]; then
          echo "No ping from 1.1.1.1, restarting"
          pkill -P $RTMON_PID &> /dev/null; kill $RTMON_PID &> /dev/null
          break
        fi
        echo "No ping from 1.1.1.1"
      fi
      sleep 10
    done
  ) & CONN_CHECK_PID=$!
}

country_check() {
  (
    local already_running=$(iptables-save | grep -q -- "-A PREROUTING -d 104.16.133.229/32 -i $VETH0_NAME -p tcp -m tcp --dport 80 -j ACCEPT" && echo true || echo false)

    if [[ -n "$COUNTRY_CHECK" && "$already_running" = false ]]; then
      echo "Checking country..."
      do_blackhole "-A"

      while true; do
        local response=$(ip netns exec $NAME curl -m 3 -s http://104.16.133.229/cdn-cgi/trace)

        if [ $? -eq 0 ] && [ -n "$response" ]; then
          local country=$(echo -e "$response" | awk -F= '/^loc/{print $2; exit 0}')
          local ip=$(echo -e "$response" | awk -F= '/^ip/{print $2; exit 0}')

          if [[ $country != "$COUNTRY_CHECK" ]]; then
            echo -e "IP: $ip\nCountry: $country\nNetwork access is disabled!"
            break
          else
            echo -e "IP: $ip\nCountry: $country"
            do_blackhole "-D"
            break
          fi
        else
          echo "Curl request failed, retrying..."        
          sleep 1
        fi
      done
    fi
  ) & COUNTRY_CHECK_PID=$!
}

inotify() {
  (
    inotifywait -r -m -e create,modify,delete /etc/netns/$NAME/ | while read -r line; do
      echo -e "$NAMESERVERS" > /etc/netns/$NAME/resolv.conf
      [ -n "$HOSTS_FILE" ] && cat $HOSTS_FILE > /etc/netns/$NAME/hosts
    done
  ) &
}

rtmon() {
  (
    local rtmon_pid=$BASHPID
    ip monitor route | while read -r line; do
      local table=$(echo $line | awk '{ for(i=1; i<=NF; i++) if($i == "table") print $(i+1) }')
      local table_is_in_range=false
      [[ -n "$table" ]] && (($table >= 28103 && $table <= 28113)) && table_is_in_range=true
      [[ $line != *"$VETH0_IP"* && $line != *"nsd"* && "$table_is_in_range" = false ]] && pkill -P $rtmon_pid &> /dev/null
    done
  ) & RTMON_PID=$!
}

cleanup() {
  if [ "$RUNNING" = true ]; then
    RUNNING=false

    if [ "$NOKILL" = true ]; then
      kill -SIGINT -$RUNNING_PID &> /dev/null
      kill -SIGTERM -$RUNNING_PID &> /dev/null
    else
      echo "Terminating other programs..."
      local pids=$(find -L /proc/[1-9]*/task/*/ns/net -samefile /run/netns/$NAME | cut -d/ -f5)
      kill -SIGINT -$pids &> /dev/null
      kill -SIGTERM -$pids &> /dev/null
      
      kill -SIGINT -$RUNNING_PID &> /dev/null
      kill -SIGTERM -$RUNNING_PID &> /dev/null
    fi

    ip link del $VETH0_NAME &> /dev/null
    ip netns del $NAME &> /dev/null
    rm -rf /etc/netns/$NAME/ &> /dev/null
    rm -rf /var/run/netns/$NAME/ &> /dev/null
    sysctl -wq net.ipv4.ip_forward=$OLD_IPV4_FORWARD &> /dev/null

    do_rules "del" &> /dev/null
    do_iptables "-D" &> /dev/null
    do_blackhole "-D" &> /dev/null

    echo "Exiting..."
    exit 0
  fi
}

init() {
  ip netns add $NAME
  ip link add $VETH0_NAME type veth peer name $VETH1_NAME
  ip link set $VETH1_NAME netns $NAME
  ip addr add $VETH0_IP/24 dev $VETH0_NAME
  ip link set $VETH0_NAME up
  ip netns exec $NAME ip link set lo up
  ip netns exec $NAME ip addr add $VETH1_IP/24 dev $VETH1_NAME
  ip netns exec $NAME ip link set $VETH1_NAME up
  ip netns exec $NAME ip route add default via $VETH0_IP
  ip netns exec $NAME sysctl -wq net.ipv4.ping_group_range="$(sysctl -n net.ipv4.ping_group_range)"

  mkdir -p /etc/netns/$NAME
  sysctl -wq net.ipv4.ip_forward=1

  echo -e "$NAMESERVERS" > /etc/netns/$NAME/resolv.conf
  [ -n "$HOSTS_FILE" ] && cat $HOSTS_FILE > /etc/netns/$NAME/hosts
  inotify

  if [ -n "$PROGRAM" ]; then
    echo "Launching program"
    [ -z "$DBUS_SESSION_BUS_ADDRESS" ] && echo "Warning, \$DBUS_SESSION_BUS_ADDRESS is not available, please use sudo -E if you launch graphical apps"
    ip netns exec $NAME sudo -E -u $PROGRAM_USER sh -c "$PROGRAM" 2>&1 | while IFS= read -r line; do echo "Program: $line"; done &
  fi

  while [ "$RUNNING" = true ]; do
    get_gateway
    do_rules "add"
    do_iptables "-A"

    rtmon 2> /dev/null
    country_check 2> /dev/null
    conn_check 2> /dev/null

    wait $RTMON_PID &> /dev/null
    pkill -P $RTMON_PID &> /dev/null; kill $RTMON_PID &> /dev/null
    pkill -P $COUNTRY_CHECK_PID &> /dev/null; kill $COUNTRY_CHECK_PID &> /dev/null
    pkill -P $CONN_CHECK_PID &> /dev/null; kill $CONN_CHECK_PID &> /dev/null

    do_rules "del" &> /dev/null
    do_blackhole "-D" &> /dev/null
    do_iptables "-D" &> /dev/null
  done
}

define_variables
parse_options "$@"
trap cleanup EXIT INT TERM SIGTERM QUIT
init "$@"