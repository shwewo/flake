#!/usr/bin/env bash

RUN_COMMAND="" # Any command you want to run
RUN_COMMAND_USER="$SUDO_USER"
RUN_COMMAND_REDIRECT_STDOUT=false;

DBUS_ADDRESS="$DBUS_SESSION_BUS_ADDRESS" # sudo -E should do this automatically, but in any problem just set unix:path=/run/user/1000/bus
SEND_NOTIFICATIONS=true # requires libnotify installed
NOTIFICATIONS_USER="$SUDO_USER" # sudo should pass $SUDO_USER, but you can set it anyway

NETNS_NAME="nsd"
NETNS_NAMESERVER_1="1.1.1.1"
NETNS_NAMESERVER_2="1.1.0.1"

VETH0_NAME="nsd0"
VETH1_NAME="nsd1"
VETH0_IP="192.168.238.1"
VETH1_IP="192.168.238.2"

DEPENDENCIES=( 
  "echo"
  "bash"
  "ip"
  "iptables"
  "exit"
  "sudo"
  "sysctl"
  "kill"
  "sleep"
  "date"
  "rm"
  "curl"
  "find"
  "awk"
  "tail"
  "timeout"
  "jq"
  "mkdir"
)

########################################################################################################################

check_binary() {
  local binary="$1"
  if ! command -v "$binary" &> /dev/null; then
    echo "Error: '$binary' not found in PATH." >&2
    exit 1
  fi
}

for binary in "${DEPENDENCIES[@]}"; do
  check_binary "$binary"
done

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  echo -e "Usage: sudo -E ./namespaced.sh <command_in_namespace>\n"
  echo -e "This will create \"$NETNS_NAME\" network namespace"
  echo -e "To execute some program inside of \"$NETNS_NAME\" namespace, use:\n"
  echo -e "*  sudo ip netns exec sudo -u $USER <program>"
  echo -e "*  firejail --netns=$NETNS_NAME --noprofile <program>"
  echo -e "\nYou can also change variable RUN_COMMAND in script to run something you need after connecting"
  exit 0
fi

if [ "$(id -u)" -ne 0 ]; then
  echo "This script must be run as root."
  exit 1
fi

if ip netns | grep -q "$NETNS_NAME"; then
  echo "This script is already running!"
  exit 1
fi

if [ ! -z "$1" ]; then
  RUN_COMMAND=$1
fi

########################################################################################################################

MAIN_PID=$$
RUNNING=true

log() {
  echo "[$(date +"%H:%M:%S %d/%m/%Y")]: $@"
}

if [ "$SEND_NOTIFICATIONS" = true ]; then
if ! command -v "notify-send" &> /dev/null; then
    log "Warning: notify-send binary not found, notifications are disabled"
    SEND_NOTIFICATIONS=false
  fi

  if [[ -z "$DBUS_ADDRESS" ]]; then
    log "Warning: DBUS_SESSION_BUS_ADDRESS is not available which is used to send notifications and graphical apps, pass -E flag to sudo to fix it automatically"
    SEND_NOTIFICATIONS=false
  fi

  if [[ -z "$NOTIFICATIONS_USER" ]]; then
    log "Warning: NOTIFICATIONS_USER is not available, please set it manually in namespaced.sh"
    SEND_NOTIFICATIONS=false
  fi

  if [ "$SEND_NOTIFICATIONS" = false ]; then
    log "Notifications are disabled"
  fi
fi

notify() {
  if [ "$SEND_NOTIFICATIONS" = true ]; then
    sudo -u $NOTIFICATIONS_USER DBUS_SESSION_BUS_ADDRESS="$DBUS_ADDRESS" notify-send --icon="$1" --urgency="$3" "namespaced.sh" "$2"
  fi
}

get_default_interface() {
  default_gateway=$(ip route show default | awk '{print $3; exit}')
  default_interface=$(ip route show default | awk '{print $5; exit}')

  if [[ -z "$default_interface" ]]; then
    log "No default interface, are you connected to the internet?"
    exit 1
  fi

  log "Default gateway: $default_gateway"
  log "Default interface: $default_interface"

  read -p "Continue? [Y/n] " choice

  if [[ $choice =~ ^[Nn]$ ]]; then
    log "Exiting..."
    exit 0
  fi
}

########################################################################################################################

purge_rules() { # Run only before deleting namespace
  ip rule del fwmark 100 table 100
  ip rule del from $VETH1_IP table 100
  ip rule del to $VETH1_IP table 100
  ip route del default via $default_gateway dev $default_interface table 100
  ip route del $VETH1_IP via $VETH0_IP dev $VETH0_NAME table 100
}

create_rules() { # Run after creating namespace
  ip rule add fwmark 100 table 100
  ip rule add from $VETH1_IP table 100
  ip rule add to $VETH1_IP table 100
  ip route add default via $default_gateway dev $default_interface table 100
  ip route add $VETH1_IP via $VETH0_IP dev $VETH0_NAME table 100
}

delete_netns() {
  rm -rf /etc/netns/$NETNS_NAME/

  purge_rules
  iptables -t nat -D POSTROUTING -o "$default_interface" -j MASQUERADE

  ip link del $VETH0_NAME
  ip netns del $NETNS_NAME
}

create_netns() {
  if ip netns | grep -q "$NETNS_NAME"; then
    delete_netns
  fi

  mkdir -p /etc/netns/$NETNS_NAME/
  echo "nameserver $NETNS_NAMESERVER_1" > /etc/netns/$NETNS_NAME/resolv.conf
  echo "nameserver $NETNS_NAMESERVER_2" >> /etc/netns/$NETNS_NAME/resolv.conf
  sysctl -wq net.ipv4.ip_forward=1
  iptables -t nat -A POSTROUTING -o "$default_interface" -j MASQUERADE

  ip netns add $NETNS_NAME
  ip link add $VETH0_NAME type veth peer name $VETH1_NAME
  ip link set $VETH1_NAME netns $NETNS_NAME
  ip addr add $VETH0_IP/24 dev $VETH0_NAME
  ip link set $VETH0_NAME up
  ip netns exec $NETNS_NAME ip link set lo up
  ip netns exec $NETNS_NAME ip addr add $VETH1_IP/24 dev $VETH1_NAME
  ip netns exec $NETNS_NAME ip link set $VETH1_NAME up
  ip netns exec $NETNS_NAME ip route add default via $VETH0_IP

  create_rules

  export NETNS_NAME
  timeout 3s bash -c 'ip netns exec $NETNS_NAME sudo -u nobody curl -s ipinfo.io | sudo -u nobody jq -r "\"IP: \(.ip)\nCity: \(.city)\nProvider: \(.org)\""'

  if [ $? -eq 124 ]; then
    log "Timed out, is something wrong?"
    kill -INT -$MAIN_PID
  fi
}

########################################################################################################################

cleanup() {
  if [ "$RUNNING" = true ]; then
    RUNNING=false
    log "Terminating all processes inside of $NETNS_NAME namespace..."
    pids=$(find -L /proc/[1-9]*/task/*/ns/net -samefile /run/netns/$NETNS_NAME | cut -d/ -f5) &> /dev/null
    kill -SIGINT -$pids &> /dev/null
    kill -SIGTERM -$pids &> /dev/null
    log "Waiting 3 seconds before SIGKILL..."
    sleep 3
    kill -SIGKILL -$pids &> /dev/null
    delete_netns
    log "Exiting..."
    notify "network-wired-offline" "$NETNS_NAME namespace has been terminated" "critical"
    exit 0
  fi
}

########################################################################################################################

ip_monitor() {
  sleep 2 # wait before they actually start to make sense
  ip monitor route | while read -r event; do
    case "$event" in
        'local '*)
          default_gateway_new=$(ip route show default | awk '{print $3; exit}')

          if [[ ! -z "$default_gateway_new" ]]; then
            if [[ ! "$default_gateway_new" == "$default_gateway" ]]; then
              log "New gateway $default_gateway_new, stopping"
              notify "network-error-symbolic" "New gateway $default_gateway_new, stopping" "critical"
              kill -INT -$MAIN_PID
            fi
          fi

          log "Network event detected, readding rules"
          purge_rules
          create_rules
        ;;
    esac
  done
};

ping() {
  local connected=true;
  while true; do
    if ip netns exec $NETNS_NAME ping -c 1 -W 1 $NETNS_NAMESERVER_1 &> /dev/null; then
      if [ "$connected" = false ]; then
        log "Connection restored"
        notify "network-wired" "Connection restored" "normal"
      fi
      connected=true
    else
      connected=false
      log "No ping from $NETNS_NAMESERVER_1, are we connected to the internet?"
      notify "network-error-symbolic" "Connection lost" "normal"
    fi
    sleep 15
  done
}

run_command() {
  log "Executing \"$RUN_COMMAND\" from user $RUN_COMMAND_USER"
  
  if [ "$RUN_COMMAND_REDIRECT_STDOUT" = true ]; then
    log "Redirecting RUN_COMMAND stdout to $PWD/namespaced_run_command.log"
  fi

  ip netns exec $NETNS_NAME sudo -E -u $RUN_COMMAND_USER bash -c "DBUS_SESSION_BUS_ADDRESS=$DBUS_ADDRESS $RUN_COMMAND" >> $PWD/namespaced_command.log 2>&1
}

########################################################################################################################

start_subshell() {
  local function_name=$1
  (
    "$function_name" &
    wait
  ) &
}

########################################################################################################################

rm -f $PWD/namespaced_command.log 2> /dev/null
touch $PWD/namespaced_command.log
get_default_interface
trap cleanup INT
create_netns
start_subshell "ip_monitor"
start_subshell "ping"
if [[ ! -z "$RUN_COMMAND" ]]; then
  start_subshell "run_command"
  if [ "$RUN_COMMAND_REDIRECT_STDOUT" = false ]; then
    tail -f -n +1 $PWD/namespaced_command.log | while read -r line; do
      log "RUN_COMMAND: $line"
    done 
  fi
fi
wait
